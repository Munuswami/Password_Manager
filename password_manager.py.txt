import sqlite3
import hashlib
import secrets
import string


class SimplePasswordManager:
    def __init__(self, database_name='password_manager.db'):
        self.conn = sqlite3.connect(database_name)
        self.create_tables()

    def create_tables(self):
        with self.conn:
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL
                )
            ''')
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS passwords (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    service_name TEXT NOT NULL,
                    encrypted_password TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users (id)
                )
            ''')

    def register_user(self, username, password):
        with self.conn:
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            self.conn.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))

        print("User registered successfully.")

    def authenticate_user(self, username, password):
        with self.conn:
            cursor = self.conn.execute('SELECT id, password FROM users WHERE username = ?', (username,))
            user_data = cursor.fetchone()

        if user_data:
            user_id, stored_password = user_data
            input_password = hashlib.sha256(password.encode()).hexdigest()

            if input_password == stored_password:
                print("Authentication successful.")
                return user_id
            else:
                print("Incorrect password. Please try again.")
                return None
        else:
            print("User not found. Please register.")
            return None

    def generate_password(self, length=12, complexity=3):
        characters = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(secrets.choice(characters) for _ in range(length))
        return password

    def store_password(self, user_id, service_name):
        with self.conn:
            password = self.generate_password()
            encrypted_password = hashlib.sha256(password.encode()).hexdigest()
            self.conn.execute('INSERT INTO passwords (user_id, service_name, encrypted_password) VALUES (?, ?, ?)',
                              (user_id, service_name, encrypted_password))

        print(f"Password for {service_name} stored successfully: {password}")

    def display_passwords(self, user_id):
        with self.conn:
            cursor = self.conn.execute('SELECT service_name, encrypted_password FROM passwords WHERE user_id = ?', (user_id,))
            passwords = cursor.fetchall()

        if not passwords:
            print("No passwords stored for this user.")
        else:
            print("Stored passwords:")
            for service, encrypted_password in passwords:
                print(f"{service}: {encrypted_password}")


if __name__ == "__main__":
    password_manager = SimplePasswordManager()

    while True:
        print("\n1. Register\n2. Login\n3. Exit")
        choice = input("Enter your choice (1/2/3): ")

        if choice == '1':
            username = input("Enter your username: ")
            password = input("Enter your password: ")
            password_manager.register_user(username, password)
        elif choice == '2':
            username = input("Enter your username: ")
            password = input("Enter your password: ")
            user_id = password_manager.authenticate_user(username, password)

            if user_id is not None:
                while True:
                    print("\n1. Generate Password\n2. Store Password\n3. Display Passwords\n4. Logout")
                    user_choice = input("Enter your choice (1/2/3/4): ")

                    if user_choice == '1':
                        length = int(input("Enter password length: "))
                        generated_password = password_manager.generate_password(length)
                        print(f"Generated Password: {generated_password}")
                    elif user_choice == '2':
                        service_name = input("Enter service name: ")
                        password_manager.store_password(user_id, service_name)
                    elif user_choice == '3':
                        password_manager.display_passwords(user_id)
                    elif user_choice == '4':
                        break
                    else:
                        print("Invalid choice. Please try again.")
        elif choice == '3':
            break
        else:
            print("Invalid choice. Please try again.")
